<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>scopeName</key>
  <string>source.puppet</string>
  <key>fileTypes</key>
  <array>
    <string>pp</string>
  </array>
  <key>foldingStartMarker</key>
  <string>(^\s*/\*|(\{|\[|\()\s*$)</string>
  <key>foldingStopMarker</key>
  <string>(\*/|^\s*(\}|\]|\)))</string>
  <key>name</key>
  <string>Puppet</string>
  <key>patterns</key>
  <array>
    <dict>
      <key>include</key>
      <string>#line_comment</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#constants</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>^\s*/\*</string>
      <key>end</key>
      <string>\*/</string>
      <key>name</key>
      <string>comment.block.puppet</string>
    </dict>

    <dict>
      <!-- node names are basically open to anything https://puppet.com/docs/puppet/6.4/lang_reserved.html#nodes -->
      <key>begin</key>
      <string>\b(node)\b</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>storage.type.puppet</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.type.class.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?={)</string>
      <key>name</key>
      <string>meta.definition.class.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\bdefault\b</string>
          <key>name</key>
          <string>keyword.puppet</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#regex-literal</string>
        </dict>
      </array>
    </dict>
    <dict>
      <!-- Class names are specified as per https://puppet.com/docs/puppet/5.0/lang_reserved.html#classes-and-defined-resource-types -->
      <key>begin</key>
      <string>\b(class)\s+((?#Qualified Resource Name)(?:[a-z][a-z0-9_]*)?(?:::[a-z][a-z0-9_]*)+|(?#Bareword Resource Name)[a-z][a-z0-9_]*)\s*</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>storage.type.puppet</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.type.class.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?={)</string>
      <key>name</key>
      <string>meta.definition.class.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>\b(inherits)\b\s+</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>storage.modifier.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(?=\(|{)</string>
          <key>name</key>
          <string>meta.definition.class.inherits.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>\b((?:[-_A-Za-z0-9".]+::)*[-_A-Za-z0-9".]+)\b</string>
              <key>name</key>
              <string>support.type.puppet</string>
            </dict>
          </array>
        </dict>
        <dict>
          <key>include</key>
          <string>#line_comment</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#resource-parameters</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#parameter-default-types</string>
        </dict>
      </array>
    </dict>
    <!-- Ref https://puppet.com/docs/bolt/0.x/writing_plans.html#naming-plans -->
    <dict>
      <key>begin</key>
      <string>^\s*(plan)\s+((?#Qualified Resource Name)(?:[a-z][a-z0-9_]*)?(?:::[a-z][a-z0-9_]*)+|(?#Bareword Resource Name)[a-z][a-z0-9_]*)\s*</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>storage.type.puppet</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.type.plan.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?={)</string>
      <key>name</key>
      <string>meta.definition.plan.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#line_comment</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#resource-parameters</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#parameter-default-types</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>begin</key>
      <!-- Function and Defined Type names are specified as per https://puppet.com/docs/puppet/5.0/lang_reserved.html#classes-and-defined-resource-types -->
      <string>^\s*(define|function)\s+((?#Bareword Resource Name)[a-z][a-z0-9_]*|(?#Qualified Resource Name)(?:[a-z][a-z0-9_]*)?(?:::[a-z][a-z0-9_]*)+)\s*(\()</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>storage.type.function.puppet</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?={)</string>
      <key>name</key>
      <string>meta.function.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#line_comment</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#resource-parameters</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#parameter-default-types</string>
        </dict>
      </array>
    </dict>
    <dict>
      <key>match</key>
      <string>\b(case|else|elsif|if|unless)(?!::)\b</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.puppet</string>
        </dict>
      </dict>
    </dict>
    <dict>
      <key>include</key>
      <string>#keywords</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#resource-definition</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#heredoc</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#strings</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#puppet-datatypes</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#array</string>
    </dict>
    <dict>
      <key>match</key>
      <string>((\$?)"?[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*"?):(?=\s+|$)</string>
      <key>name</key>
      <string>entity.name.section.puppet</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#numbers</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#variable</string>
    </dict>
    <dict>
      <key>begin</key>
      <string>\b(import|include|contain|require)\s+(?!.*=>)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.control.import.include.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?=\s|$)</string>
      <key>contentName</key>
      <string>variable.parameter.include.puppet</string>
      <key>name</key>
      <string>meta.include.puppet</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\b\w+\s*(?==&gt;)\s*</string>
      <key>name</key>
      <string>constant.other.key.puppet</string>
    </dict>
    <dict>
      <key>match</key>
      <string>(?&lt;={)\s*\w+\s*(?=})</string>
      <key>name</key>
      <string>constant.other.bareword.puppet</string>
    </dict>
    <dict>
      <key>match</key>
      <string>\b(alert|crit|debug|defined|emerg|err|escape|fail|failed|file|generate|gsub|info|notice|package|realize|search|tag|tagged|template|warning)\b(?!.*{)</string>
      <key>name</key>
      <string>support.function.puppet</string>
    </dict>
    <dict>
      <key>match</key>
      <string>=></string>
      <key>name</key>
      <string>punctuation.separator.key-value.puppet</string>
    </dict>
    <dict>
      <key>match</key>
      <string>-></string>
      <key>name</key>
      <string>keyword.control.orderarrow.puppet</string>
    </dict>
    <dict>
      <key>match</key>
      <string>~></string>
      <key>name</key>
      <string>keyword.control.notifyarrow.puppet</string>
    </dict>
    <dict>
      <key>include</key>
      <string>#regex-literal</string>
    </dict>
  </array>
  <key>repository</key>
  <dict>
    <key>constants</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\b(absent|directory|false|file|present|running|stopped|true)\b(?!.*{)</string>
          <key>name</key>
          <string>constant.language.puppet</string>
        </dict>
      </array>
    </dict>
    <key>double-quoted-string</key>
    <dict>
      <key>begin</key>
      <string>"</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>"</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.puppet</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.double.interpolated.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#interpolated_puppet</string>
        </dict>
      </array>
    </dict>
    <!-- Ref: https://puppet.com/docs/puppet/latest/lang_data_string.html#short-forms-for-variable-interpolation -->
    <key>interpolated_puppet</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- These definitions are the #variable matches but expressed as an interpolated string sequence e.g. ${var::foo .... } -->
        <!-- Predefined variables -->
        <!-- Similar to https://github.com/rubyide/vscode-ruby/blob/bdad0449bfc12778e1a501c084443ae8f4c94066/syntaxes/ruby.cson.json#L212-L220 -->
        <dict>
          <key>begin</key>
          <string>(\${)(\d+)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.begin.puppet</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>source.puppet variable.other.readwrite.global.pre-defined.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>}</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.end.puppet</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.puppet</string>
          <key>name</key>
          <string>meta.embedded.line.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
        </dict>
        <!-- Short variable names can start with underscore e.g. "${_foo1}", "${_foo2.split(..)}" -->
        <dict>
          <key>begin</key>
          <string>(\${)(_[a-zA-Z0-9_]*)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.begin.puppet</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>source.puppet variable.other.readwrite.global.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>}</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.end.puppet</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.puppet</string>
          <key>name</key>
          <string>meta.embedded.line.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
        </dict>
        <!-- Qualified variable names (Can't start with underscore) -->
        <dict>
          <key>begin</key>
          <string>(\${)(([a-z][a-z0-9_]*)?(?:::[a-z][a-z0-9_]*)*)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.begin.puppet</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>source.puppet variable.other.readwrite.global.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>}</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.end.puppet</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.puppet</string>
          <key>name</key>
          <string>meta.embedded.line.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
        </dict>
        <!-- Catchall. Includes variables with leading $ -->
        <dict>
          <key>begin</key>
          <string>\${</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.begin.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>}</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.section.embedded.end.puppet</string>
            </dict>
          </dict>
          <key>contentName</key>
          <string>source.puppet</string>
          <key>name</key>
          <string>meta.embedded.line.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>$self</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <key>escaped_char</key>
    <dict>
      <key>match</key>
      <string>\\.</string>
      <key>name</key>
      <string>constant.character.escape.puppet</string>
    </dict>
    <key>line_comment</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>comment.line.number-sign.puppet</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.puppet</string>
            </dict>
          </dict>
          <key>match</key>
          <string>^((#).*$\n?)</string>
          <key>name</key>
          <string>meta.comment.full-line.puppet</string>
        </dict>
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.comment.puppet</string>
            </dict>
          </dict>
          <key>match</key>
          <string>(#).*$\n?</string>
          <key>name</key>
          <string>comment.line.number-sign.puppet</string>
        </dict>
      </array>
    </dict>
    <key>nested_braces</key>
    <dict>
      <key>begin</key>
      <string>\{</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\}</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nested_braces</string>
        </dict>
      </array>
    </dict>
    <key>nested_braces_interpolated</key>
    <dict>
      <key>begin</key>
      <string>\{</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\}</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#variable</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nested_braces_interpolated</string>
        </dict>
      </array>
    </dict>
    <key>nested_brackets</key>
    <dict>
      <key>begin</key>
      <string>\[</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nested_brackets</string>
        </dict>
      </array>
    </dict>
    <key>nested_brackets_interpolated</key>
    <dict>
      <key>begin</key>
      <string>\[</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#variable</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nested_brackets_interpolated</string>
        </dict>
      </array>
    </dict>
    <key>nested_parens</key>
    <dict>
      <key>begin</key>
      <string>\(</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nested_parens</string>
        </dict>
      </array>
    </dict>
    <key>nested_parens_interpolated</key>
    <dict>
      <key>begin</key>
      <string>\(</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.section.scope.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\)</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#variable</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#nested_parens_interpolated</string>
        </dict>
      </array>
    </dict>
    <key>parameter-default-types</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#numbers</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#variable</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#hash</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#array</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#function_call</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#constants</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#puppet-datatypes</string>
        </dict>
      </array>
    </dict>
    <key>resource-parameters</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- `$param,` -->
        <dict>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>variable.other.puppet</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.puppet</string>
            </dict>
          </dict>
          <key>match</key>
          <string>((\$+)[a-zA-Z_][a-zA-Z0-9_]*)\s*(?=,|\))</string>
          <key>name</key>
          <string>meta.function.argument.puppet</string>
        </dict>
        <!-- `$param = ...,` -->
        <dict>
          <key>begin</key>
          <string>((\$+)[a-zA-Z_][a-zA-Z0-9_]*)(?:\s*(=)\s*)\s*</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>variable.other.puppet</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.puppet</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.assignment.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(?=,|\))</string>
          <key>name</key>
          <string>meta.function.argument.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#parameter-default-types</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    <key>array</key>
    <dict>
      <key>begin</key>
      <string>(\[)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.array.begin.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\]</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.array.end.puppet</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.array.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\s*,\s*</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#parameter-default-types</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#line_comment</string>
        </dict>
      </array>
    </dict>
    <key>hash</key>
    <dict>
      <key>begin</key>
      <string>\{</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.hash.begin.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>\}</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.hash.end.puppet</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.hash.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\b\w+\s*(?==>)\s*</string>
          <key>name</key>
          <string>constant.other.key.puppet</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#parameter-default-types</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#line_comment</string>
        </dict>
      </array>
    </dict>
    <key>single-quoted-string</key>
    <dict>
      <key>begin</key>
      <string>'</string>
      <key>beginCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.begin.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>'</string>
      <key>endCaptures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.string.end.puppet</string>
        </dict>
      </dict>
      <key>name</key>
      <string>string.quoted.single.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#escaped_char</string>
        </dict>
      </array>
    </dict>
    <key>strings</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#double-quoted-string</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#single-quoted-string</string>
        </dict>
      </array>
    </dict>

    <key>keywords</key>
    <dict>
      <key>match</key>
      <string>\b(undef)\b</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.puppet</string>
        </dict>
      </dict>
    </dict>

    <!-- Ref https://github.com/puppetlabs/puppet-specifications/blob/master/language/lexical_structure.md#numbers -->
    <key>numbers</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- Hex numbers -->
        <dict>
          <key>comment</key>
          <string>HEX 0x 0-f</string>
          <key>match</key>
          <string>(?&lt;!\w|\d)([-+]?)(?i:0x)(?i:[0-9a-f])+(?!\w|\d)</string>
          <key>name</key>
          <string>constant.numeric.hexadecimal.puppet</string>
        </dict>
        <!-- Integers and Octal numbers -->
        <dict>
          <key>comment</key>
          <string>INTEGERS [(+|-)] digits [e [(+|-)] digits]</string>
          <key>match</key>
          <string>(?&lt;!\w|\.)([-+]?)(?&lt;!\d)\d+(?i:e(\+|-){0,1}\d+){0,1}(?!\w|\d|\.)</string>
          <key>name</key>
          <string>constant.numeric.integer.puppet</string>
        </dict>
        <!-- Floating point numbers -->
        <dict>
          <key>comment</key>
          <string>FLOAT [(+|-)] digits . digits [e [(+|-)] digits]</string>
          <key>match</key>
          <string>(?&lt;!\w)([-+]?)\d+\.\d+(?i:e(\+|-){0,1}\d+){0,1}(?!\w|\d)</string>
          <key>name</key>
          <string>constant.numeric.integer.puppet</string>
        </dict>
      </array>
    </dict>
    <!-- Resource definition using a bareword or qualified resource name -->
    <!-- Reference https://puppet.com/docs/puppet/latest/lang_reserved.html#classes-and-defined-resource-types -->
    <key>resource-definition</key>
    <dict>
      <key>begin</key>
      <string>(?:^|\b)((?#Toplevel Bareword)::[a-z][a-z0-9_]*|(?#Bareword Resource Name)[a-z][a-z0-9_]*|(?#Qualified Resource Name)(?:[a-z][a-z0-9_]*)?(?:::[a-z][a-z0-9_]*)+)\s*({)\s*</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>meta.definition.resource.puppet storage.type.puppet</string>
        </dict>
      </dict>
      <key>end</key>
      <string>:</string>
      <key>contentName</key>
      <string>entity.name.section.puppet</string>
      <!-- Resource title matching patterns -->
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#variable</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#array</string>
        </dict>
      </array>
    </dict>
    <!-- Ref: https://puppet.com/docs/puppet/latest/lang_variables.html#regular-expressions-for-variable-names -->
    <key>variable</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- Predefined variables -->
        <!-- Similar to https://github.com/rubyide/vscode-ruby/blob/bdad0449bfc12778e1a501c084443ae8f4c94066/syntaxes/ruby.cson.json#L212-L220 -->
        <dict>
          <key>match</key>
          <string>(\$)(\d+)</string>
          <key>name</key>
          <string>variable.other.readwrite.global.pre-defined.puppet</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.puppet</string>
            </dict>
          </dict>
        </dict>
        <!--Short variable names can start with underscore -->
        <dict>
          <key>match</key>
          <string>(\$)_[a-zA-Z0-9_]*</string>
          <key>name</key>
          <string>variable.other.readwrite.global.puppet</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.puppet</string>
            </dict>
          </dict>
        </dict>
        <!-- Qualified variable names (Can't start with underscore) -->
        <dict>
          <key>match</key>
          <string>(\$)(([a-z][a-zA-Z0-9_]*)?(?:::[a-z][a-zA-Z0-9_]*)*)</string>
          <key>name</key>
          <string>variable.other.readwrite.global.puppet</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.variable.puppet</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    <key>function_call</key>
    <dict>
      <key>begin</key>
      <string>([a-zA-Z_][a-zA-Z0-9_]*)(\()</string>
      <key>end</key>
      <string>\)</string>
      <key>name</key>
      <string>meta.function-call.puppet</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#parameter-default-types</string>
        </dict>
        <dict>
          <key>match</key>
          <string>,</string>
          <key>name</key>
          <string>punctuation.separator.parameters.puppet</string>
        </dict>
      </array>
    </dict>
    <!--
      Ref: https://github.com/puppetlabs/puppet-specifications/blob/master/language/types_values_variables.md#the-type-system

      Resource References using a bareword or qualified resource name, but with captialised first segment letter, followed by opening square bracket, but that can
      have underscores as well. Resource References are technically a Puppet Data Type, so use the same tags
      Ref: https://puppet.com/docs/puppet/latest/lang_data_resource_reference.html -->
    <key>puppet-datatypes</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>comment</key>
          <string>Puppet Data type</string>
          <key>match</key>
          <string>(?&lt;![a-zA-Z\$])([A-Z][a-zA-Z0-9_]*)(?![a-zA-Z0-9_])</string>
          <key>name</key>
          <string>storage.type.puppet</string>
        </dict>
      </array>
    </dict>
    <key>regex-literal</key>
    <dict>
      <key>match</key>
      <string>(\/)(.+?)(?:[^\\]\/)</string>
      <key>name</key>
      <string>string.regexp.literal.puppet</string>
      <key>comment</key>
      <string>Puppet Regular expression literal without interpolation</string>
    </dict>
    <!-- Ref: https://puppet.com/docs/puppet/latest/lang_variables.html#regular-expressions-for-variable-names -->
    <key>heredoc</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- Heredoc with interpolation e.g. @( END : abc / ts ) -->
        <dict>
          <key>begin</key>
          <string>@\([[:blank:]]*"([^:\/) \t]+)"[[:blank:]]*(:[[:blank:]]*[a-z][a-zA-Z0-9_+]*[[:blank:]]*)?(\/[[:blank:]]*[tsrnL$]*)?[[:blank:]]*\)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>^[[:blank:]]*(\|[[:blank:]]*-|\||-)?[[:blank:]]*\1</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.puppet</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.interpolated.heredoc.puppet</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#escaped_char</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolated_puppet</string>
            </dict>
          </array>
        </dict>
        <!-- Heredoc without interpolation e.g. @( END : abc / ts ) -->
        <dict>
          <key>begin</key>
          <string>@\([[:blank:]]*([^:\/) \t]+)[[:blank:]]*(:[[:blank:]]*[a-z][a-zA-Z0-9_+]*[[:blank:]]*)?(\/[[:blank:]]*[tsrnL$]*)?[[:blank:]]*\)</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.puppet</string>
            </dict>
          </dict>
          <key>end</key>
          <string>^[[:blank:]]*(\|[[:blank:]]*-|\||-)?[[:blank:]]*\1</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.puppet</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.unquoted.heredoc.puppet</string>
        </dict>
      </array>
    </dict>
  </dict>
</dict>
</plist>
